function expts = runExperiment(matfile_in, settings, exptname)
	%Fit GLM specified in settings on start and end recordings of all experiments
    %
    %Usage:
    %   expts = runExperiment(matfile_in, settings, exptname)
    %
    %Input:
    %   matpath = filename to csv file output from nevmappings containing all nev and mapping info
    %   settings = structure containing all options for processing and GLM model to fit to data
    %       Generated by setupExperiment()
    %   exptname = basename to save fitted model files for each .nev file
    %
    %Output:
    %	expts = structure array listing experiment details:
    %		.nevfile_start = nevfile before
    %		.nevfile_end = nevfile after
    %		.matfile_start = matfile before
    %		.matfile_end = matfile after
    %		.cond_secs = [1xnC] array listing number of seconds of trials under each condition 
    %		.events = details about all the events that come in between start and end, including BCI units used
    %			between start and end recording -- what we'll be fitting a model to.
    %       .settings = settings provided by setupExperiment
    %       .modelstart = fit GLM to start recording
    %       .modelend = fit GLM to end recording
    %
    %Test code:
    %   matfile_in = './expts/2dmanualpos_1day.mat';
    %   settings = setupExperiment('sprc_def');
    %   exptname = '2dmanualpos_sprc_def';
    %   expts = runExperiment(matfile_in, settings, exptname);

	load(matfile_in);
	nexpts = length(expts);
	%Iterate over expts structure
	for idx = 1:nexpts
        expt = expts(idx);
        %Determine if models have already been fit and saved in ./expts/
        nev_start = expt.nevfile_start;
        nev_end = expt.nevfile_end;
        mat_start = expt.matfile_start;
        mat_end = expt.matfile_end;
        fn_start = ['./expts/' exptname '_' nev_start(1:end-4) '.mat'];
        fn_end = ['./expts/' exptname '_' nev_end(1:end-4) '.mat'];
        %Process starting recording, unless it already has been during a previous experiment
        if (exist(fn_start, 'file') == 2)
            display([fn_start ' already fit. Continuing'])
            load(fn_start);
        else
            display([fn_start ' not fit. Fitting GLM'])
            %If not, preprocess data
            processed = settings.process([settings.nevfiledir expt.nevfile_start], [settings.matfiledir expt.matfile_start]);
            %Combine data to same electrode
            processed_mua = combine_mua(processed);
            %Truncate to 'duration' seconds of recording
            processed_mua = truncate_recording(processed_mua, settings.duration);
            %Create filters
            data = settings.filters(processed_mua);
            %Fit model
            model = settings.fit(data, settings.const);
            %Save fit model as ./expts/exptname_nevfile.mat
            save(fn_start, 'model');            
        end
        %Add to .modelstart
        expt.modelstart = model;
        %Do the same for the ending recording
        if (exist(fn_end, 'file') == 2)
            display([fn_end ' already fit. Continuing'])
            load(fn_end);
        else
            display([fn_end ' not fit. Fitting GLM'])
            %If hasn't been processed, do it
            processed = settings.process([settings.nevfiledir expt.nevfile_end], [settings.matfiledir expt.matfile_end]);
            %Combine data from same electrode
            processed_mua = combine_mua(processed);
            %Truncate to 'duration' seconds of recording
            processed_mua = truncate_recording(processed_mua, settings.duration);
            %Create filters
            data = settings.filters(processed_mua);
            %Fit model
            model = settings.fit(data, settings.const);
            %Save fit model as ./expts/exptname_nevfile.mat
            save(fn_end, 'model');            
        end
        %Add to .modelend
        expt.modelend = model;
        %Return
        fitexpts(idx) = expt;
    end
    expts = fitexpts;
end



