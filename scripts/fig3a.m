%conn = database('',databaseuser,databasepwd,'com.mysql.jdbc.Driver', ...
%	databaseurl);
%
%%List of files
%files = fetch(exec(conn, ['SELECT et.`manualrecording` FROM experiment_tuning et']));
%files = files.Data;
%
%nR = 50;
%rng(15);
%
%%%%%%%%%%%%%%%%%%%%%
%%     BCI units    %
%%      BC task     %
%%%%%%%%%%%%%%%%%%%%%
%
%bc_bcicotuned = [];
%bc_bcirandom = [];
%bc_othercotuned = [];
%bc_otherrandom = [];
%
%dc_bcicotuned = [];
%dc_bcirandom = [];
%dc_othercotuned = [];
%dc_otherrandom = [];
%
%for rep = 1:nR
%	display(['rep = ' num2str(rep)])
%	for idx = 1:length(files)
%		mcfile = files{idx};
%		all_data = fetch(exec(conn, ['SELECT fl1.dir, fl2.dir, fl5.dir, et1.`tuning_type`, flin1.unit FROM '...
%		'`experiment_tuning` et1 '...
%		'INNER JOIN `fits` flin1 '...
%		'ON flin1.`nev file` = et1.`manualrecording`'...
%		'INNER JOIN `fits_linear` fl1 '...
%		'ON flin1.id = fl1.id '...
%		'INNER JOIN `fits` flin2 '...
%		'ON flin2.`nev file` = et1.`1DBCrecording`'...
%		'INNER JOIN `fits_linear` fl2 '...
%		'ON flin2.id = fl2.id '...
%		'INNER JOIN `fits` flin5 '...
%		'ON flin5.`nev file` = et1.`dualrecording` '...
%		'INNER JOIN `fits_linear` fl5 '...
%		'ON flin5.id = fl5.id '...
%		'WHERE flin1.modelID = 30 AND flin2.modelID = 30 AND flin5.modelID = 30 ' ...
%		'AND flin1.unit = flin2.unit AND flin2.unit = flin5.unit ' ...
%		'AND fl1.r2 > 0.0 '...
%		'AND NOT EXISTS (SELECT * FROM `bci_units` bci WHERE bci.`ID` = et1.`1DBCrecording` AND bci.unit = flin1.unit) '...
%		'AND et1.`manualrecording` = "' mcfile '" '...
%		'AND (et1.`tuning_type` = 1 OR et1.`tuning_type` = 3 OR et1.`tuning_type` = 4)']));
%		if strcmp(all_data.Data, 'No Data')
%			continue 
%		end
%		if size(all_data.Data, 1) < 4 
%			continue 
%		end
%	
%		all_theta = cell2mat(all_data.Data(:,1:3));
%		tuningtype = cell2mat(all_data.Data(:,4));
%		otherunits = all_data.Data(:,5);
%		
%		%BCI unit
%		all_data = fetch(exec(conn, ['SELECT fl1.dir, fl2.dir, fl5.dir, flin1.unit FROM '...
%		'`experiment_tuning` et1 '...
%		'INNER JOIN `fits` flin1 '...
%		'ON flin1.`nev file` = et1.`manualrecording`'...
%		'INNER JOIN `fits_linear` fl1 '...
%		'ON flin1.id = fl1.id '...
%		'INNER JOIN `fits` flin2 '...
%		'ON flin2.`nev file` = et1.`1DBCrecording`'...
%		'INNER JOIN `fits_linear` fl2 '...
%		'ON flin2.id = fl2.id '...
%		'INNER JOIN `fits` flin5 '...
%		'ON flin5.`nev file` = et1.`dualrecording`'...
%		'INNER JOIN `fits_linear` fl5 '...
%		'ON flin5.id = fl5.id '...
%		'WHERE flin1.modelID = 30 AND flin2.modelID = 30 AND flin5.modelID = 30 ' ...
%		'AND flin1.unit = flin2.unit AND flin2.unit = flin5.unit ' ...
%		'AND EXISTS (SELECT * FROM `bci_units` bci WHERE bci.`ID` = et1.`1DBCrecording` AND bci.unit = flin1.unit) '...
%		'AND et1.`manualrecording` = "' mcfile '" '...
%		'LIMIT 1']));
%		%'AND et1.`tuning_type` = 5 '...
%		bci_theta = cell2mat(all_data.Data(:,1:3));
%		bci_unit = all_data.Data(:,4);
%		nU = size(all_theta,1);
%		%Pick cotuned units to BCI units in MC
%		diff_MC_theta = cos(bci_theta(1) - all_theta(:,1));		
%		%Pick top two
%		[l, cotunedidx] = sort(diff_MC_theta, 'descend'); 
%		cotunedidx = cotunedidx(1:2);
%		%Pick random two 
%		otheridx = randsample(setdiff(1:nU, cotunedidx), 2);
%		bc_bcicotuned = [bc_bcicotuned, diff_MC_theta(cotunedidx)];
%		bc_bcirandom = [bc_bcirandom, diff_MC_theta(otheridx)];
%	end
%end
%
%%%%%%%%%%%%%%%%%%%%%
%%     BCI units    %
%%      DC task     %
%%%%%%%%%%%%%%%%%%%%%
%
%for rep = 1:nR
%	display(['rep = ' num2str(rep)])
%	for idx = 1:length(files)
%		cotunedgranger = [];
%		othergranger = [];
%		mcfile = files{idx};
%		all_data = fetch(exec(conn, ['SELECT fl1.dir, fl2.dir, fl5.dir, et1.`tuning_type`, flin1.unit FROM '...
%		'`experiment_tuning` et1 '...
%		'INNER JOIN `fits` flin1 '...
%		'ON flin1.`nev file` = et1.`manualrecording`'...
%		'INNER JOIN `fits_linear` fl1 '...
%		'ON flin1.id = fl1.id '...
%		'INNER JOIN `fits` flin2 '...
%		'ON flin2.`nev file` = et1.`1DBCrecording`'...
%		'INNER JOIN `fits_linear` fl2 '...
%		'ON flin2.id = fl2.id '...
%		'INNER JOIN `fits` flin5 '...
%		'ON flin5.`nev file` = et1.`dualrecording` '...
%		'INNER JOIN `fits_linear` fl5 '...
%		'ON flin5.id = fl5.id '...
%		'WHERE flin1.modelID = 30 AND flin2.modelID = 30 AND flin5.modelID = 30 ' ...
%		'AND flin1.unit = flin2.unit AND flin2.unit = flin5.unit ' ...
%		'AND fl1.r2 > 0.0 '...
%		'AND NOT EXISTS (SELECT * FROM `bci_units` bci WHERE bci.`ID` = et1.`1DBCrecording` AND bci.unit = flin1.unit) '...
%		'AND et1.`manualrecording` = "' mcfile '" '...
%		'AND (et1.`tuning_type` = 1 OR et1.`tuning_type` = 3 OR et1.`tuning_type` = 4)']));
%		if strcmp(all_data.Data, 'No Data')
%			continue 
%		end
%		if size(all_data.Data, 1) < 4 
%			continue 
%		end
%	
%		all_theta = cell2mat(all_data.Data(:,1:3));
%		tuningtype = cell2mat(all_data.Data(:,4));
%		otherunits = all_data.Data(:,5);
%		
%		%BCI unit
%		all_data = fetch(exec(conn, ['SELECT fl1.dir, fl2.dir, fl5.dir, flin1.unit FROM '...
%		'`experiment_tuning` et1 '...
%		'INNER JOIN `fits` flin1 '...
%		'ON flin1.`nev file` = et1.`manualrecording`'...
%		'INNER JOIN `fits_linear` fl1 '...
%		'ON flin1.id = fl1.id '...
%		'INNER JOIN `fits` flin2 '...
%		'ON flin2.`nev file` = et1.`1DBCrecording`'...
%		'INNER JOIN `fits_linear` fl2 '...
%		'ON flin2.id = fl2.id '...
%		'INNER JOIN `fits` flin5 '...
%		'ON flin5.`nev file` = et1.`dualrecording`'...
%		'INNER JOIN `fits_linear` fl5 '...
%		'ON flin5.id = fl5.id '...
%		'WHERE flin1.modelID = 30 AND flin2.modelID = 30 AND flin5.modelID = 30 ' ...
%		'AND flin1.unit = flin2.unit AND flin2.unit = flin5.unit ' ...
%		'AND EXISTS (SELECT * FROM `bci_units` bci WHERE bci.`ID` = et1.`1DBCrecording` AND bci.unit = flin1.unit) '...
%		'AND et1.`manualrecording` = "' mcfile '" '...
%		'LIMIT 1']));
%		%'AND et1.`tuning_type` = 5 '...
%		bci_theta = cell2mat(all_data.Data(:,1:3));
%		bci_unit = all_data.Data(:,4);
%		nU = size(all_theta,1);
%		%Pick cotuned units to BCI units in MC
%		diff_MC_theta = cos(bci_theta(1) - all_theta(:,1));
%		%Pick top two
%		[l, cotunedidx] = sort(diff_MC_theta, 'descend'); 
%		cotunedidx = cotunedidx(1:2);
%		%Pick random two 
%		otheridx = randsample(setdiff(1:nU, cotunedidx), 2);
%		dc_bcicotuned = [dc_bcicotuned, diff_MC_theta(cotunedidx)];
%		dc_bcirandom = [dc_bcirandom, diff_MC_theta(otheridx)];
%	end
%end
%
%%%%%%%%%%%%%%%%%%%%%
%%  non-BCI units   %
%%      BC task     %
%%%%%%%%%%%%%%%%%%%%%
%
%for rep = 1:nR
%	display(['rep = ' num2str(rep)])
%	for idx = 1:length(files)
%		cotunedgranger = [];
%		othergranger = [];
%		mcfile = files{idx};
%		all_data = fetch(exec(conn, ['SELECT fl1.dir, fl2.dir, fl5.dir, et1.`tuning_type`, flin1.unit FROM '...
%		'`experiment_tuning` et1 '...
%		'INNER JOIN `fits` flin1 '...
%		'ON flin1.`nev file` = et1.`manualrecording`'...
%		'INNER JOIN `fits_linear` fl1 '...
%		'ON flin1.id = fl1.id '...
%		'INNER JOIN `fits` flin2 '...
%		'ON flin2.`nev file` = et1.`1DBCrecording`'...
%		'INNER JOIN `fits_linear` fl2 '...
%		'ON flin2.id = fl2.id '...
%		'INNER JOIN `fits` flin5 '...
%		'ON flin5.`nev file` = et1.`dualrecording` '...
%		'INNER JOIN `fits_linear` fl5 '...
%		'ON flin5.id = fl5.id '...
%		'WHERE flin1.modelID = 30 AND flin2.modelID = 30 AND flin5.modelID = 30 ' ...
%		'AND flin1.unit = flin2.unit AND flin2.unit = flin5.unit ' ...
%		'AND fl1.r2 > 0.0 '...
%		'AND NOT EXISTS (SELECT * FROM `bci_units` bci WHERE bci.`ID` = et1.`1DBCrecording` AND bci.unit = flin1.unit) '...
%		'AND et1.`manualrecording` = "' mcfile '" '...
%		'AND (et1.`tuning_type` = 1 OR et1.`tuning_type` = 3 OR et1.`tuning_type` = 4)']));
%		if strcmp(all_data.Data, 'No Data')
%			continue 
%		end
%		if size(all_data.Data, 1) < 4 
%			continue 
%		end
%	
%		all_theta = cell2mat(all_data.Data(:,1:3));
%		tuningtype = cell2mat(all_data.Data(:,4));
%		otherunits = all_data.Data(:,5);
%		
%		nU = size(otherunits, 1);
%		nonbciidx = randsample(nU,1);
%		otheridx = setdiff(1:nU, nonbciidx);
%
%		bci_theta = all_theta(nonbciidx,:);
%		bci_unit = otherunits(nonbciidx);
%
%		all_theta = all_theta(otheridx,:);
%		tuningtype = tuningtype(otheridx);
%		otherunits = otherunits(otheridx);
%
%		nU = nU - 1;
%		%Pick cotuned units to BCI units in MC
%		diff_MC_theta = cos(bci_theta(1) - all_theta(:,1));
%		%Pick top two
%		[l, cotunedidx] = sort(diff_MC_theta, 'descend'); 
%		cotunedidx = cotunedidx(1:2);
%		%Pick random two 
%		otheridx = randsample(setdiff(1:nU, cotunedidx), 2);
%		otherunitnames = otherunits(otheridx);
%		bc_othercotuned = [bc_othercotuned, diff_MC_theta(cotunedidx)];
%		bc_otherrandom = [bc_otherrandom, diff_MC_theta(otheridx)];
%	end
%end
%
%%%%%%%%%%%%%%%%%%%%%
%%  non-BCI units   %
%%      DC task     %
%%%%%%%%%%%%%%%%%%%%%
%
%for rep = 1:nR
%	display(['rep = ' num2str(rep)])
%	for idx = 1:length(files)
%		cotunedgranger = [];
%		othergranger = [];
%		mcfile = files{idx};
%		all_data = fetch(exec(conn, ['SELECT fl1.dir, fl2.dir, fl5.dir, et1.`tuning_type`, flin1.unit FROM '...
%		'`experiment_tuning` et1 '...
%		'INNER JOIN `fits` flin1 '...
%		'ON flin1.`nev file` = et1.`manualrecording`'...
%		'INNER JOIN `fits_linear` fl1 '...
%		'ON flin1.id = fl1.id '...
%		'INNER JOIN `fits` flin2 '...
%		'ON flin2.`nev file` = et1.`1DBCrecording`'...
%		'INNER JOIN `fits_linear` fl2 '...
%		'ON flin2.id = fl2.id '...
%		'INNER JOIN `fits` flin5 '...
%		'ON flin5.`nev file` = et1.`dualrecording` '...
%		'INNER JOIN `fits_linear` fl5 '...
%		'ON flin5.id = fl5.id '...
%		'WHERE flin1.modelID = 30 AND flin2.modelID = 30 AND flin5.modelID = 30 ' ...
%		'AND flin1.unit = flin2.unit AND flin2.unit = flin5.unit ' ...
%		'AND fl1.r2 > 0.0 '...
%		'AND NOT EXISTS (SELECT * FROM `bci_units` bci WHERE bci.`ID` = et1.`1DBCrecording` AND bci.unit = flin1.unit) '...
%		'AND et1.`manualrecording` = "' mcfile '" '...
%		'AND (et1.`tuning_type` = 1 OR et1.`tuning_type` = 3 OR et1.`tuning_type` = 4)']));
%		if strcmp(all_data.Data, 'No Data')
%			continue 
%		end
%		if size(all_data.Data, 1) < 4 
%			continue 
%		end
%	
%		all_theta = cell2mat(all_data.Data(:,1:3));
%		tuningtype = cell2mat(all_data.Data(:,4));
%		otherunits = all_data.Data(:,5);
%		
%		nU = size(otherunits, 1);
%		nonbciidx = randsample(nU,1);
%		otheridx = setdiff(1:nU, nonbciidx);
%
%		bci_theta = all_theta(nonbciidx,:);
%		bci_unit = otherunits(nonbciidx);
%
%		all_theta = all_theta(otheridx,:);
%		tuningtype = tuningtype(otheridx);
%		otherunits = otherunits(otheridx);
%
%		nU = nU - 1;
%		%Pick cotuned units to BCI units in MC
%		diff_MC_theta = cos(bci_theta(1) - all_theta(:,1));		
%		%Pick top two
%		[l, cotunedidx] = sort(diff_MC_theta, 'descend'); 
%		cotunedidx = cotunedidx(1:2);
%		%Pick random two 
%		otheridx = randsample(setdiff(1:nU, cotunedidx), 2);
%		dc_othercotuned = [dc_othercotuned, diff_MC_theta(cotunedidx)];
%		dc_otherrandom = [dc_otherrandom,diff_MC_theta(otheridx)];
%	end
%end
%
%save('./scripts/fig3a.mat')
load('./scripts/fig3a.mat')

%Plot brain control task
%Control units
binwidth = 6;
subplot(2,2,1)
histogram(acos(bc_bcicotuned)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
hold on
histogram(acos(bc_bcirandom)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
title('BC task; control units')
xlim([0 180])

%Dual control task
%Control units
subplot(2,2,2)
histogram(acos(dc_bcicotuned)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
hold on
histogram(acos(dc_bcirandom)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
title('DC task; control units')
xlim([0 180])

%Brain control task
%Non control units
subplot(2,2,3)
histogram(acos(bc_othercotuned)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
hold on
histogram(acos(bc_otherrandom)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
title('BC task; non-control units')
xlabel('angle')
xlim([0 180])

%Dual control task
%Non control units
subplot(2,2,4)
histogram(acos(dc_othercotuned)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
hold on
histogram(acos(dc_otherrandom)*180/pi,'facealpha',.5,'edgecolor','none', 'Normalization', 'countdensity', 'BinWidth', binwidth)
title('DC task; non-control units')
xlim([0 180])
xlabel('angle')

saveplot(gcf, './figures/fig3a.eps', 'eps', [6 6]);